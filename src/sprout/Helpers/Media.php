<?php
/*
 * Copyright (C) 2017 Karmabunny Pty Ltd.
 *
 * This file is a part of SproutCMS.
 *
 * SproutCMS is free software: you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation, either
 * version 2 of the License, or (at your option) any later version.
 *
 * For more information, visit <http://getsproutcms.com>.
 */

namespace Sprout\Helpers;

use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use SplFileInfo;
use Sprout\Exceptions\MediaException;
use Sprout\Exceptions\MediaMissingException;

/**
 * Helpers for resolving and loading media files.
 *
 * These are asset files from modules, skin or sprout. These are files are
 * not necessarily accessible from the web root because they're located
 * in the src/ or vendor/ folders.
 *
 * Asset files are expected to live in the `media/` folder for core, sprout
 * and modules sections. Skin files are exempt to this rule.
 *
 * For public access, files are served by the {@see MediaController} with a
 * checksum per 'section' (core/sprout/skin/module). This url is generated by
 * the {@see Media::url} helper also used internally by the {@see Needs} helper.
 *
 * Note that Sprout has _two_ media folders. This is simply a legacy
 * holdover - there's no true distinction between the two.
 *
 * @see MediaController
 */
class Media
{

    /**
     * Short cache of checksums.
     *
     * It's important the key here is independent of any absolute paths given
     * an application may be mounted in a container or use symlinks.
     *
     * @var string[] [ section => checksum ]`
     */
    protected static $checksums = [];


    /**
     * This is the asset descriptor.
     *
     * Relative to the root web path and section.
     *
     * - `WEBROOT + _media + section + name` is the web URL
     * - `root + name` is the original path
     *
     * @var string
     */
    public $name;

    /**
     * This is the root directory for the section/asset media folder.
     *
     * Sections define where a collection of assets live.
     *
     * - core: `COREPATH/media`
     * - sprout: `APPPATH/media`
     * - skin: `DOCROOT/{skin}`
     * - module: `{path}/media`
     *
     * The asset name is always relative to this root.
     *
     * @var string
     */
    public $root;

    /**
     * The section for the asset.
     *
     * One of:
     *
     * - core
     * - sprout
     * - skin/{name}
     * - modules/{name}
     *
     * This is a unique identifier for where each group of assets live. This
     * forms the cache
     * Skins and modules
     *
     * @var string
     */
    public $section;


    /**
     * Parse a media asset.
     *
     * Provide an asset descriptor like:
     *
     * - `core/js/file.js`
     * - `sprout/css/sheet.css`
     * - `skin/default/images/office.png`
     * - `modules/{name}/css/custom.css`
     *
     * This extracts the section, file name, and root path.
     *
     * @param string $asset
     * @return Media
     * @throws MediaException
     */
    public static function parse(string $asset)
    {
        [$section, $subsection, $name] = explode('/', $asset, 3) + ['', '', ''];

        switch ($section) {
            case 'core':
                $name = $name ? "{$subsection}/{$name}" : $subsection;

                $media = new self;
                $media->name = $name;
                $media->section = 'core';
                $media->root = COREPATH . 'media/';
                return $media;

            case 'sprout':
                $name = $name ? "{$subsection}/{$name}" : $subsection;

                $media = new self;
                $media->name = $name;
                $media->section = 'sprout';
                $media->root = APPPATH . 'media/';
                return $media;

            case 'skin':
                if (!$name) {
                    throw new MediaException('Invalid media: ' . $asset);
                }

                $media = new self;
                $media->name = $name;
                $media->section = "skin/{$subsection}";
                $media->root = DOCROOT . "skin/{$subsection}/";
                return $media;

            case 'modules':
                if (!$name) {
                    throw new MediaException('Invalid media: ' . $asset);
                }

                $module = Modules::getModule($subsection);

                if (!$module) {
                    throw new MediaException("Module not found: '{$subsection}'");
                }

                $media = new self;
                $media->name = $name;
                $media->section = "modules/{$subsection}";
                $media->root = $module->getPath() . 'media/';
                return $media;

            default:
                throw new MediaException('Invalid media type: ' . $section);
        }
    }


    /**
     * The full absolute path to the original asset.
     *
     * @return string
     */
    public function getPath(): string
    {
        return $this->root . $this->name;
    }


    /**
     * The non-generated URL.
     *
     * This URL will always redirect to the generated URL.
     *
     * @param bool $timestamp
     * @return string
     */
    public function getUrl(bool $timestamp = true): string
    {
        $url = "_media/{$this->section}/{$this->name}";

        if ($timestamp) {
            $mtime = @filemtime($this->getPath()) ?: time();
            $url .= '?' . $mtime;
        }

        return $url;
    }


    /**
     * Generate a URL for an asset.
     *
     * @param string $path full path to a file
     * @return string media URL like `_media/{checksum}/{section}/{file}`
     * @throws MediaException
     */
    public function generateUrl(): string
    {
        $checksum = self::getChecksum($this->root);

        if ($checksum === null) {
            throw new MediaException("Failed to generate checksum for: {$this->section}");
        }

        $path = $this->getPath();

        if (!file_exists($path)) {
            throw new MediaMissingException("File not found: '{$this->name}' ({$this->section})");
        }

        $url = "_media/{$checksum}/{$this->section}/{$this->name}";
        $dest = WEBROOT . $url;

        if (!file_exists($dest)) {
            $dir = dirname($dest);

            // if (exists) mkdir() is not atomic. Another thread can always                       ..
            // beat us to it. Do and ask for forgiveness later.
            @mkdir($dir, 0777, true);

            if (!is_dir($dir)) {
                throw new MediaException("Target directory is missing: {$dir}");
            }

            $ok = @copy($path, $dest);

            if (!$ok) {
                throw new MediaException("Failed to copy file: '{$this->name}' to '{$url}' ({$this->section})");
            }
        }

        return $url;
    }


    /**
     * Get the checksum for this asset.
     *
     * A checksum is common across all resources within the same section.
     *
     * @return null|string
     * @throws MediaException
     */
    public function getChecksum(): ?string
    {
        $cache = Cache::instance('media');

        // We always check the short cache.
        $checksum = self::$checksums[$this->section] ?? null;

        if ($checksum) {
            return $checksum;
        }

        // Now check the long cache, if enabled.
        if (
            defined('BootstrapConfig::ENABLE_MEDIA_CACHE')
            and constant('BootstrapConfig::ENABLE_MEDIA_CACHE')
            and ($checksum = $cache->get($this->section))
        ) {
            self::$checksums[$this->section] = $checksum;
            return $checksum;
        }

        // Generate it.
        $checksum = self::generateChecksum($this->root);

        if ($checksum) {
            self::$checksums[$this->section] = $checksum;
            $cache->set($this->section, $checksum);
        }

        return $checksum;
    }


    /**
     * Generate a checksum for a given directory.
     *
     * Optionally copy all files within to the `WEBROOT/_media/` folder.
     *
     * @param string $path
     * @param bool $copy_files
     * @return string|null
     */
    public static function generateChecksum(string $path, bool $copy_files = false): ?string
    {
        if (!is_dir($path)) {
            return null;
        }

        $files = [];
        $checksum = '';

        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($path,
                RecursiveDirectoryIterator::SKIP_DOTS
            )
        );

        foreach ($iterator as $file) {
            /** @var SplFileInfo $file */
            if (!$file->isFile()) continue;
            $file = $file->getPathname();

            $files[] = $file;
            $checksum .= '.' . sha1_file($file);
        }

        // Sum the checksums.
        $checksum = sha1($checksum);
        $checksum = substr($checksum, 0, 8);

        // Now copy all the media files for this section.
        // This helps retains relative paths.
        if ($copy_files) {
            foreach ($files as $file) {
                $file = trim(str_replace($path, '', $file), '/');

                $dest = WEBROOT . "_media/{$checksum}/{$file}";
                $dir = dirname($dest);

                @mkdir($dir, 0777, true);
                @copy($file, $dest);
            }
        }

        return $checksum;
    }


    /**
     * Get the URL for an asset.
     *
     * @param string $name like `section/path/to/file`
     * @param bool $generate
     * @return string a relative URL (without ROOT/)
     */
    public static function url(string $name, bool $generate = true): string
    {
        $media = self::parse($name);

        if ($generate) {
            return $media->generateUrl();
        } else {
            return $media->getUrl();
        }
    }


    /**
     * Get a media tag for a file.
     *
     * This will return a <script> or <link> tag for the given file based on
     * the file extension.
     *
     * @param string $file section/path/to/file
     * @param array $extra_attrs
     * @return string
     */
    public static function tag(string $file, array $extra_attrs = []): string
    {
        unset($extra_attrs['_ts']);

        $media = self::parse($file);
        $url = 'ROOT/' . $media->generateUrl();

        if (preg_match('/.js$/', $file)) {
            $extra_attrs['src'] = $url;
            $extra_attrs['type'] ??= 'text/javascript';

            return '<script ' . Html::attributes($extra_attrs) . '></script>';
        }

        if (preg_match('/.css$/', $file)) {
            $extra_attrs['href'] = $url;
            $extra_attrs['type'] ??= 'text/css';
            $extra_attrs['rel'] ??= 'stylesheet';

            return '<link ' . Html::attributes($extra_attrs) . '>';
        }

        $extra_attrs['src'] = $url;
        return '<img ' . Html::attributes($extra_attrs) . '>';
    }


    /**
     * Clean out the media cache.
     *
     * @param bool|string $act act|dry|silent
     * @return void
     */
    public static function clean($act = true)
    {
        $dir = WEBROOT . '_media/';
        $children = is_dir($dir) ? scandir($dir) : [];

        if (is_bool($act)) {
            $act = $act ? 'act' : 'dry';
        }

        $log = function($message) use ($act) {
            if ($act == 'silent') return;
            echo $message, "\n";
        };

        $log($act == 'dry' ? 'Dry run...' : 'Clearing...');

        $count = 0;

        foreach ($children as $item) {
            $path = $dir . $item;

            if (!is_dir($path)) continue;
            if (strpos($item, '.') === 0) continue;

            $log($path);

            if ($act != 'dry') {
                exec('rm -rf ' . escapeshellarg($path));
            }

            $count++;
        }

        if ($act) {
            $cache = Cache::instance('media');
            $cache->deleteAll();
        }

        $log("Clean: {$count}");
    }
}
